{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    static gameStatuses = {\n        idle: \"idle\",\n        playing: \"playing\",\n        lose: \"lose\",\n        win: \"win\"\n    };\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.status = $a5fd07fa01589658$var$Game.gameStatuses.idle;\n        this.score = 0;\n    }\n    moveLeft() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.gameStatuses.playing) return;\n        const updatedState = this.state.map((row)=>this.move(row));\n        if (JSON.stringify(this.getState()) !== JSON.stringify(updatedState)) {\n            this.updateGameState(updatedState);\n            this.addCells();\n        }\n    }\n    moveRight() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.gameStatuses.playing) return;\n        const reverseState = this.state.map((row)=>[\n                ...row\n            ].reverse());\n        const updatedState = reverseState.map((row)=>{\n            return this.move(row).reverse();\n        });\n        if (JSON.stringify(this.getState()) !== JSON.stringify(updatedState)) {\n            this.updateGameState(updatedState);\n            this.addCells();\n        }\n    }\n    moveUp() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.gameStatuses.playing) return;\n        const rotateState = this.rotateMatrixCounteClockwise(this.getState());\n        const updatedState = rotateState.map((row)=>this.move(row));\n        const unRotateSteate = this.rotateMatrixClockwise(updatedState);\n        if (JSON.stringify(this.getState()) !== JSON.stringify(unRotateSteate)) {\n            this.updateGameState(unRotateSteate);\n            this.addCells();\n        }\n    }\n    moveDown() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.gameStatuses.playing) return;\n        const rotateState = this.rotateMatrixClockwise(this.getState());\n        const updatedState = rotateState.map((row)=>this.move(row));\n        const unRotateSteate = this.rotateMatrixCounteClockwise(updatedState);\n        if (JSON.stringify(this.getState()) !== JSON.stringify(unRotateSteate)) {\n            this.updateGameState(unRotateSteate);\n            this.addCells();\n        }\n    }\n    move(row) {\n        const newRow = [];\n        let i = 0;\n        while(i < row.length){\n            const current = row[i];\n            if (current) {\n                let pushed = false;\n                for(let j = i + 1; j < row.length; j++){\n                    const next = row[j];\n                    if (next === current) {\n                        newRow.push(current * 2);\n                        this.updateGameScore(current * 2);\n                        pushed = true;\n                        i = j + 1;\n                        break;\n                    } else if (next) {\n                        newRow.push(current);\n                        pushed = true;\n                        i = j;\n                        break;\n                    }\n                }\n                if (!pushed) {\n                    newRow.push(current);\n                    i++;\n                }\n            } else i++;\n        }\n        while(newRow.length < row.length)newRow.push(0);\n        return newRow;\n    }\n    rotateMatrixClockwise(matrix) {\n        const n = matrix.length;\n        const rotatedMatrix = [];\n        for(let i = 0; i < n; i++){\n            rotatedMatrix.push([]);\n            for(let j = 0; j < n; j++)rotatedMatrix[i].unshift(matrix[j][i]);\n        }\n        return rotatedMatrix;\n    }\n    rotateMatrixCounteClockwise(matrix) {\n        const n = matrix.length;\n        const rotatedMatrix = [];\n        for(let i = 0; i < n; i++){\n            rotatedMatrix.unshift([]);\n            for(let j = 0; j < n; j++)rotatedMatrix[0].push(matrix[j][i]);\n        }\n        return rotatedMatrix;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.gameStatuses.playing;\n        this.addCells(2);\n    }\n    restart() {\n        this.status = $a5fd07fa01589658$var$Game.gameStatuses.idle;\n        this.resetState();\n    }\n    getEmptyCells() {\n        return this.state.flatMap((row, rowIndex)=>{\n            return row.map((cell, colIndex)=>{\n                return cell === 0 ? [\n                    rowIndex,\n                    colIndex\n                ] : null;\n            });\n        }).filter((cell)=>cell !== null);\n    }\n    createNewTile() {\n        const emptyCells = this.getEmptyCells();\n        if (!emptyCells.length) return;\n        const [row, col] = emptyCells[Math.trunc(Math.random() * emptyCells.length)];\n        this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n    addCells(count = 1) {\n        for(let i = 0; i < count; i++)this.createNewTile();\n        const state = this.getState();\n        if (this.isVictory(state)) this.status = $a5fd07fa01589658$var$Game.gameStatuses.win;\n        else if (this.isGameOver(state)) this.status = $a5fd07fa01589658$var$Game.gameStatuses.lose;\n    }\n    resetState() {\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n    }\n    isGameOver(currentState) {\n        if (this.status !== $a5fd07fa01589658$var$Game.gameStatuses.playing) return false;\n        for(let row = 0; row < currentState.length; row++)for(let col = 0; col < currentState[row].length; col++){\n            if (currentState[row][col] === 0 || col < currentState[row].length - 1 && currentState[row][col] === currentState[row][col + 1] || row < currentState.length - 1 && currentState[row][col] === currentState[row + 1][col]) return false;\n        }\n        return true;\n    }\n    updateGameState(state) {\n        this.state = state;\n    }\n    updateGameScore(scoreToAdd) {\n        this.score += scoreToAdd;\n    }\n    isVictory(state) {\n        return state.flat().some((tile)=>tile === 2048);\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// Write your code here\nconst $09e991522ca7e64e$var$container = document.querySelector(\".container\");\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$button = $09e991522ca7e64e$var$container.querySelector(\".button\");\nconst $09e991522ca7e64e$var$gameScore = $09e991522ca7e64e$var$container.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$fieldRows = [\n    ...$09e991522ca7e64e$var$gameField.querySelectorAll(\".field-row\")\n];\nconst $09e991522ca7e64e$var$fieldCells = $09e991522ca7e64e$var$fieldRows.map((row)=>[\n        ...row.children\n    ]);\nconst $09e991522ca7e64e$var$messages = {\n    idle: $09e991522ca7e64e$var$container.querySelector(\".message-start\"),\n    lose: $09e991522ca7e64e$var$container.querySelector(\".message-lose\"),\n    win: $09e991522ca7e64e$var$container.querySelector(\".message-win\")\n};\nfunction $09e991522ca7e64e$var$fillGameField(state) {\n    state.forEach((row, i)=>{\n        row.forEach((cell, j)=>{\n            const currentCell = $09e991522ca7e64e$var$fieldCells[i][j];\n            currentCell.className = !cell ? \"field-cell\" : `field-cell field-cell--${cell}`;\n            currentCell.innerHTML = !cell ? \"\" : cell;\n        });\n    });\n}\nfunction $09e991522ca7e64e$var$showMessage() {\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    for(const key in $09e991522ca7e64e$var$messages)if (Object.hasOwnProperty.call($09e991522ca7e64e$var$messages, key)) {\n        const message = $09e991522ca7e64e$var$messages[key];\n        if (message) message.classList.toggle(\"hidden\", key !== gameStatus);\n    }\n}\nfunction $09e991522ca7e64e$var$updateScore(score) {\n    $09e991522ca7e64e$var$gameScore.innerHTML = score;\n}\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    const buttonText = $09e991522ca7e64e$var$button.textContent;\n    if (buttonText === \"Start\") {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$button.classList.replace(\"start\", \"restart\");\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$updateScore(0);\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$button.classList.replace(\"restart\", \"start\");\n    }\n    const state = $09e991522ca7e64e$var$game.getState();\n    $09e991522ca7e64e$var$fillGameField(state);\n    $09e991522ca7e64e$var$showMessage();\n});\ndocument.addEventListener(\"keydown\", (keyEvent)=>{\n    keyEvent.preventDefault();\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    const moveActions = {\n        ArrowUp: $09e991522ca7e64e$var$game.moveUp,\n        ArrowDown: $09e991522ca7e64e$var$game.moveDown,\n        ArrowLeft: $09e991522ca7e64e$var$game.moveLeft,\n        ArrowRight: $09e991522ca7e64e$var$game.moveRight\n    };\n    const action = moveActions[keyEvent.key];\n    if (action) action.call($09e991522ca7e64e$var$game);\n    $09e991522ca7e64e$var$fillGameField($09e991522ca7e64e$var$game.getState());\n    $09e991522ca7e64e$var$updateScore($09e991522ca7e64e$var$game.getScore());\n    $09e991522ca7e64e$var$showMessage();\n});\n\n\n//# sourceMappingURL=index.1cfe3e33.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\nconst container = document.querySelector('.container');\nconst gameField = document.querySelector('.game-field');\nconst button = container.querySelector('.button');\nconst gameScore = container.querySelector('.game-score');\n\nconst fieldRows = [...gameField.querySelectorAll('.field-row')];\nconst fieldCells = fieldRows.map((row) => [...row.children]);\n\nconst messages = {\n  idle: container.querySelector('.message-start'),\n  lose: container.querySelector('.message-lose'),\n  win: container.querySelector('.message-win'),\n};\n\nfunction fillGameField(state) {\n  state.forEach((row, i) => {\n    row.forEach((cell, j) => {\n      const currentCell = fieldCells[i][j];\n\n      currentCell.className = !cell\n        ? 'field-cell'\n        : `field-cell field-cell--${cell}`;\n      currentCell.innerHTML = !cell ? '' : cell;\n    });\n  });\n}\n\nfunction showMessage() {\n  const gameStatus = game.getStatus();\n\n  for (const key in messages) {\n    if (Object.hasOwnProperty.call(messages, key)) {\n      const message = messages[key];\n\n      if (message) {\n        message.classList.toggle('hidden', key !== gameStatus);\n      }\n    }\n  }\n}\n\nfunction updateScore(score) {\n  gameScore.innerHTML = score;\n}\n\nbutton.addEventListener('click', () => {\n  const buttonText = button.textContent;\n\n  if (buttonText === 'Start') {\n    game.start();\n    button.textContent = 'Restart';\n    button.classList.replace('start', 'restart');\n  } else {\n    game.restart();\n    updateScore(0);\n    button.textContent = 'Start';\n    button.classList.replace('restart', 'start');\n  }\n\n  const state = game.getState();\n\n  fillGameField(state);\n  showMessage();\n});\n\ndocument.addEventListener('keydown', (keyEvent) => {\n  keyEvent.preventDefault();\n\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  const moveActions = {\n    ArrowUp: game.moveUp,\n    ArrowDown: game.moveDown,\n    ArrowLeft: game.moveLeft,\n    ArrowRight: game.moveRight,\n  };\n\n  const action = moveActions[keyEvent.key];\n\n  if (action) {\n    action.call(game);\n  }\n\n  fillGameField(game.getState());\n  updateScore(game.getScore());\n  showMessage();\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  static gameStatuses = {\n    idle: 'idle',\n    playing: 'playing',\n    lose: 'lose',\n    win: 'win',\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.state = this.initialState.map((row) => [...row]);\n    this.status = Game.gameStatuses.idle;\n    this.score = 0;\n  }\n\n  moveLeft() {\n    if (this.getStatus() !== Game.gameStatuses.playing) {\n      return;\n    }\n\n    const updatedState = this.state.map((row) => this.move(row));\n\n    if (JSON.stringify(this.getState()) !== JSON.stringify(updatedState)) {\n      this.updateGameState(updatedState);\n      this.addCells();\n    }\n  }\n\n  moveRight() {\n    if (this.getStatus() !== Game.gameStatuses.playing) {\n      return;\n    }\n\n    const reverseState = this.state.map((row) => [...row].reverse());\n\n    const updatedState = reverseState.map((row) => {\n      return this.move(row).reverse();\n    });\n\n    if (JSON.stringify(this.getState()) !== JSON.stringify(updatedState)) {\n      this.updateGameState(updatedState);\n      this.addCells();\n    }\n  }\n\n  moveUp() {\n    if (this.getStatus() !== Game.gameStatuses.playing) {\n      return;\n    }\n\n    const rotateState = this.rotateMatrixCounteClockwise(this.getState());\n\n    const updatedState = rotateState.map((row) => this.move(row));\n\n    const unRotateSteate = this.rotateMatrixClockwise(updatedState);\n\n    if (JSON.stringify(this.getState()) !== JSON.stringify(unRotateSteate)) {\n      this.updateGameState(unRotateSteate);\n      this.addCells();\n    }\n  }\n\n  moveDown() {\n    if (this.getStatus() !== Game.gameStatuses.playing) {\n      return;\n    }\n\n    const rotateState = this.rotateMatrixClockwise(this.getState());\n\n    const updatedState = rotateState.map((row) => this.move(row));\n\n    const unRotateSteate = this.rotateMatrixCounteClockwise(updatedState);\n\n    if (JSON.stringify(this.getState()) !== JSON.stringify(unRotateSteate)) {\n      this.updateGameState(unRotateSteate);\n      this.addCells();\n    }\n  }\n\n  move(row) {\n    const newRow = [];\n    let i = 0;\n\n    while (i < row.length) {\n      const current = row[i];\n\n      if (current) {\n        let pushed = false;\n\n        for (let j = i + 1; j < row.length; j++) {\n          const next = row[j];\n\n          if (next === current) {\n            newRow.push(current * 2);\n            this.updateGameScore(current * 2);\n            pushed = true;\n            i = j + 1;\n            break;\n          } else if (next) {\n            newRow.push(current);\n            pushed = true;\n            i = j;\n            break;\n          }\n        }\n\n        if (!pushed) {\n          newRow.push(current);\n          i++;\n        }\n      } else {\n        i++;\n      }\n    }\n\n    while (newRow.length < row.length) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  rotateMatrixClockwise(matrix) {\n    const n = matrix.length;\n    const rotatedMatrix = [];\n\n    for (let i = 0; i < n; i++) {\n      rotatedMatrix.push([]);\n\n      for (let j = 0; j < n; j++) {\n        rotatedMatrix[i].unshift(matrix[j][i]);\n      }\n    }\n\n    return rotatedMatrix;\n  }\n\n  rotateMatrixCounteClockwise(matrix) {\n    const n = matrix.length;\n    const rotatedMatrix = [];\n\n    for (let i = 0; i < n; i++) {\n      rotatedMatrix.unshift([]);\n\n      for (let j = 0; j < n; j++) {\n        rotatedMatrix[0].push(matrix[j][i]);\n      }\n    }\n\n    return rotatedMatrix;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.gameStatuses.playing;\n    this.addCells(2);\n  }\n\n  restart() {\n    this.status = Game.gameStatuses.idle;\n    this.resetState();\n  }\n\n  getEmptyCells() {\n    return this.state\n      .flatMap((row, rowIndex) => {\n        return row.map((cell, colIndex) => {\n          return cell === 0 ? [rowIndex, colIndex] : null;\n        });\n      })\n      .filter((cell) => cell !== null);\n  }\n\n  createNewTile() {\n    const emptyCells = this.getEmptyCells();\n\n    if (!emptyCells.length) {\n      return;\n    }\n\n    const [row, col] =\n      emptyCells[Math.trunc(Math.random() * emptyCells.length)];\n\n    this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  addCells(count = 1) {\n    for (let i = 0; i < count; i++) {\n      this.createNewTile();\n    }\n\n    const state = this.getState();\n\n    if (this.isVictory(state)) {\n      this.status = Game.gameStatuses.win;\n    } else if (this.isGameOver(state)) {\n      this.status = Game.gameStatuses.lose;\n    }\n  }\n\n  resetState() {\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n  }\n\n  isGameOver(currentState) {\n    if (this.status !== Game.gameStatuses.playing) {\n      return false;\n    }\n\n    for (let row = 0; row < currentState.length; row++) {\n      for (let col = 0; col < currentState[row].length; col++) {\n        if (\n          currentState[row][col] === 0 ||\n          (col < currentState[row].length - 1 &&\n            currentState[row][col] === currentState[row][col + 1]) ||\n          (row < currentState.length - 1 &&\n            currentState[row][col] === currentState[row + 1][col])\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  updateGameState(state) {\n    this.state = state;\n  }\n\n  updateGameScore(scoreToAdd) {\n    this.score += scoreToAdd;\n  }\n\n  isVictory(state) {\n    return state.flat().some((tile) => tile === 2048);\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$var$Game","gameStatuses","idle","playing","lose","win","constructor","initialState","state","map","row","status","score","moveLeft","getStatus","updatedState","move","JSON","stringify","getState","updateGameState","addCells","moveRight","reverseState","reverse","moveUp","rotateState","rotateMatrixCounteClockwise","unRotateSteate","rotateMatrixClockwise","moveDown","newRow","i","length","current","pushed","j","next","push","updateGameScore","matrix","n","rotatedMatrix","unshift","getScore","start","restart","resetState","getEmptyCells","flatMap","rowIndex","cell","colIndex","filter","createNewTile","emptyCells","col","Math","trunc","random","count","isVictory","isGameOver","currentState","scoreToAdd","flat","some","tile","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$container","document","querySelector","$09e991522ca7e64e$var$gameField","$09e991522ca7e64e$var$button","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$fieldCells","$09e991522ca7e64e$var$fieldRows","querySelectorAll","children","$09e991522ca7e64e$var$messages","$09e991522ca7e64e$var$fillGameField","forEach","currentCell","className","innerHTML","$09e991522ca7e64e$var$showMessage","gameStatus","key","Object","hasOwnProperty","call","message","classList","toggle","$09e991522ca7e64e$var$updateScore","addEventListener","buttonText","textContent","replace","keyEvent","preventDefault","action","moveActions","ArrowUp","ArrowDown","ArrowLeft","ArrowRight"],"version":3,"file":"index.1cfe3e33.js.map"}